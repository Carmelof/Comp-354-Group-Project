{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;\f2\fmodern\fcharset0 CourierNewPS-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red56\green110\blue255;}
\margl1440\margr1440\vieww14880\viewh9540\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 TODO\
\
\pard\pardeftab720

\b\fs28 \cf0 What's left to do for Increment 2 (minor bugs/enhancements; may be completed during increment 3):
\b0\fs24 \
\
\pard\pardeftab720

\b \cf0 Development:
\b0 \
1- .csv extension is not added automatically when saving a file, the user as to enter it manually when specifying a file name\
2- update the status bar to display a message if load/save is not successful (may need to change loadFile()/saveFile() from void to return a value)\
3- check that only csv files can be saved\
4- check that only csv files can be loaded\
5- if a csv file is loaded check that its content is no bigger than 10x10 or else return error/warning message\
6- prevent the user from entering cell names like A100, B101, C001. If the user enters A09 change it to A9 (I'm working on it) 
\i ==> Status: Ongoing
\i0 \
7- add an onClose event that checks if the window is being closed or if the user clicks File|Quit, and ask the user to confirm if there are unsaved changes\
\

\b Documentation:
\b0 \
.\
.\

\i Suggestions from past and present documenters go here\
\pard\pardeftab720

\i0 \cf0 .\
.\
\
\pard\pardeftab720

\b \cf0 Testing:
\b0 \
- Test the Loading / Saving \
- Test Error messages functionality \
- Test that inputs cannot go out of specific bounds \
- Test division by zero \
- Test Interdepencies (A1 = B1 + C1 && C1 = A1 + B1) should throw an error\
\
\pard\pardeftab720

\b\fs28 \cf0 Increment 3:
\b0\fs24 \
\
\pard\pardeftab720

\b \cf0 Development:
\b0 \
1- Enable cell editing and check if the value entered is valid before inserting it in the grid's cell, update grid after each insertion\
2- Create Edit menu with Cut/Copy/Paste menu items and implement the features\
3- Check if the value of a cell needs to be formatted to integer, monetary, or scientific format (I'll do it since I wrote the code to validate an input): ==> 
\i Status: Ongoing
\i0 \
\
\'a0\'a0\'a0\'a0\'a0 
\f1 input =\'a0 
\f2\b "10 + 5.458"
\f1\b0 \'a0 ===> returns 15.458 (default)\
\'a0\'a0 input =\'a0 
\f2\b "10 + 5:M"
\f1\b0 \'a0 ===> returns $15.00 (monetary)\
\'a0\'a0 input =\'a0 
\f2\b "223.45654543434:S"
\f1\b0 \'a0 ===> returns 2.23e+2 (scientific)\
\'a0\'a0 input =\'a0 
\f2\b "10 + 5.2:I"
\f1\b0 \'a0 ===> returns 15 (integer)
\f0 \
\'a0\'a0\'a0 \
4- Enable horizontal scrolling\
\
\

\b Documentation & Testing:
\i\b0 \
(From course website)
\i0 \
-Document is a short summary of your test plan and test results: basically tell me how thoroughly you tested and whether there are still outstanding bugs or issues.\
-Latex template for test document {\field{\*\fldinst{HYPERLINK "http://users.encs.concordia.ca/%7Egregb/home/PDF/se-test-doc-template.tex"}}{\fldrslt \cf2 \ul \ulc2 here}}. \
-Make sure that each test is individually numbered. Regard inputs with multiple effects/results as multiple tests, and number them individually. \
-Note that you may have some common situations/scenarios such as sample file contents, sample documents, sample screen positions, etc used in many tests. Document and number them in a section for reference in the test\'a0 cases. \
-The test plan should indicate which test cases apply to which requirements, and make it abundantly clear (traceable) that each requirement is tested. \
\
\
\pard\pardeftab720

\b\fs28 \cf0 Extras:
\b0\fs24 \
\
1- Add File|New that will reset the content of the grid\
2- Add File|Save As that will save the current spreadsheet to a file and modify File|Save which will update an existing file that has been loaded\
3- Enable user to add a row\
4- Enable user to add a column\
5- Enable column sorting\
6- Anything else you might think of and that you want to implement\
}